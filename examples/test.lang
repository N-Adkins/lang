var fib := fn (x: int) -> int {
    var state := [0, 1];
    var i := 0;
    while (i <= x) {
        state[i % 2] = state[0] + state[1]; 
        i = i + 1;
    }
    return state[i % 2]; 
};

var bad_fib := fn (self, x: int) -> int {
    if (x <= 1) {
        return x;
    }
    return self(x-1) + self(x-2);
};

var inplace_sort := fn (arr: [int], compare: fn (int, int) -> bool) -> void {
    var len := length(arr);
    var i := 0;
    while (i < len) {
        var j := 0;
        while (j < len - i - 1) {
            if (compare(arr[j], arr[j+1])) {
                var temp := arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return;
};

var compare := fn (x: int, y: int) -> bool {
    return x > y;
};

var array := [822, 327, 1, 83, 94, 27];
var duped_array := clone(array);
print(array);
print(duped_array);
inplace_sort(array, compare);
print(array);
