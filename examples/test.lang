fn merge(array: [int], low: int, mid: int, high: int) -> void {
    var low_size := mid - low + 1;
    var high_size := high - mid;

    var low_array := clone(array);
    var high_array := clone(array);
    
    for (var i := 0; i < low_size; i = i + 1;) {
        low_array[i] = array[low + i];
    }
    
    for (var i := 0; i < high_size; i = i + 1;) {
        high_array[i] = array[mid + i + 1];
    }

    var low_ptr := 0;
    var high_ptr := 0;
    var i := low;

    while (low_ptr < low_size and high_ptr < high_size) {
        if (low_array[low_ptr] < high_array[high_ptr]) {
            array[i] = low_array[low_ptr];
            low_ptr = low_ptr + 1;
        } else {
            array[i] = high_array[high_ptr];
            high_ptr = high_ptr + 1;
        }
        i = i + 1;
    }

    while (low_ptr < low_size) {
        array[i] = low_array[low_ptr];
        i = i + 1;
        low_ptr = low_ptr + 1;
    }

    while (high_ptr < high_size) {
        array[i] = high_array[high_ptr];
        i = i + 1;
        high_ptr = high_ptr + 1;
    }

    return;
}

fn merge_sort(array: [int], low: int, high: int) -> void {
    if (low >= high) {
        return;
    }
    var mid := (high + low) / 2;
    merge_sort(array, low, mid);
    merge_sort(array, mid + 1, high);
    merge(array, low, mid, high);
    return;   
}

var array := [822, 327, 1, 83, 94, 27, 128 ,12, 3,12 3,12,3 12,3 ,123 ,12,3 12,3,12, 01 , 23, 38 3,57 474, 4784, 87312];

print(array);
merge_sort(array, 0, length(array)-1);
print(array);
