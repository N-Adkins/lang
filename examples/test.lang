fn merge_inner(array: [int], compare: fn (int, int) -> bool, low: int, mid: int, high: int) -> void {
    var low_size := mid - low + 1;
    var high_size := high - mid;

    var low_array := clone(array);
    var high_array := clone(array);
    
    for var i := 0; i < low_size; i = i + 1; {
        low_array[i] = array[low + i];
    }
    
    for var i := 0; i < high_size; i = i + 1; {
        high_array[i] = array[mid + i + 1];
    }

    var low_ptr := 0;
    var high_ptr := 0;
    var i := low;

    while low_ptr < low_size and high_ptr < high_size {
        if (compare(low_array[low_ptr], high_array[high_ptr])) {
            array[i] = low_array[low_ptr];
            low_ptr = low_ptr + 1;
        } else {
            array[i] = high_array[high_ptr];
            high_ptr = high_ptr + 1;
        }
        i = i + 1;
    }

    while low_ptr < low_size {
        array[i] = low_array[low_ptr];
        i = i + 1;
        low_ptr = low_ptr + 1;
    }

    while high_ptr < high_size {
        array[i] = high_array[high_ptr];
        i = i + 1;
        high_ptr = high_ptr + 1;
    }

    return;
}

fn merge_sort_inner(array: [int], compare: fn (int, int) -> bool, low: int, high: int) -> void {
    if low >= high {
        return;
    }
    var mid := (high + low) / 2;
    merge_sort_inner(array, compare, low, mid);
    merge_sort_inner(array, compare, mid + 1, high);
    merge_inner(array, compare, low, mid, high);
    return;   
}

fn sort(array: [int], compare: fn (int, int) -> bool) -> void {
    var len := length(array);
    merge_sort_inner(array, compare, 0, len-1);
    return;
}

fn compare(lhs: int, rhs: int) -> bool {
    return lhs < rhs;
}

var array := [8309, 761, 6961, 4061, 9885, 751, 1927, 6614, 8853, 7327, 7121, 245, 3379, 955, 1436, 8987, 9960, 9560, 1637, 2728, 8021, 2250, 4879, 5305, 5826, 3666, 1598, 3944, 1548, 8640, 4700, 5916, 3778, 8395, 8153, 5060, 9286, 8107, 3092, 1080, 8362, 3279, 3031, 6548, 6626, 2011, 1397, 529, 6375, 7499, 5052, 3187, 5779, 2797, 124, 6563, 3218, 6851, 9340, 6136, 6006, 9288, 7445, 5790, 6266, 8111, 879, 3163, 9039, 9860, 9718, 8076, 1925, 8339, 1851, 8963, 9076, 9793, 5399, 800, 2726, 9218, 687, 3229, 5898, 8801, 1320, 8564, 8889, 5494, 946, 5303, 8152, 4582, 5371, 712, 369, 1675, 3396, 983, 6230, 6843, 1129, 9436, 8352, 4974, 8038, 7655, 4900, 158, 7773, 4732, 3588, 3397, 8880, 4181, 1661, 3869, 1781, 3796, 1072, 947, 803, 7752, 7846, 2662, 1798, 4568, 5220, 4009, 3975, 7494, 775, 5121, 7418, 8032, 845, 1221, 7540, 5294, 5070, 5939, 2057, 9015, 4146, 4154, 2920, 1685, 3464, 410, 9111, 2130, 596, 4060, 542, 6079, 702, 549, 8408, 3861, 4745, 6920, 4254, 5648, 2333, 3276, 2, 3626, 5565, 2583, 3855, 3080, 8353, 9047, 9479, 1747, 5544, 4936, 7209, 5537, 7047, 5273, 9176, 9842, 9930, 905, 1425, 6978, 975, 1077, 9454, 3101, 7832, 7663, 9214, 2951, 3745, 5792, 7808, 8251];

print(array);
sort(array, compare);
print("");
print(array);
